{"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aizz1CfzXf1I","executionInfo":{"status":"ok","timestamp":1747391630555,"user_tz":-330,"elapsed":2616,"user":{"displayName":"Sandhiya Sd","userId":"03388719252497544613"}},"outputId":"4e013f35-c758-47b0-bc5f-f87994120ea1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Load the dataset\n","df = pd.read_csv(\"csv file.csv\")\n","\n","# Show the first 5 rows\n","print(df.head())\n","\n","# Summary info\n","print(df.info())\n","\n","# Check for missing values\n","print(df.isnull().sum())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jVR_mV2Vc0cj","executionInfo":{"status":"ok","timestamp":1747388320872,"user_tz":-330,"elapsed":130,"user":{"displayName":"Sandhiya Sd","userId":"03388719252497544613"}},"outputId":"b1c33eeb-654e-440b-e818-39b40b064948"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["      Name   Age  Marks  Attendance Passed\n","0    Alice  20.0   85.0        90.0    Yes\n","1      Bob  21.0    NaN        80.0     No\n","2  Charlie   NaN   78.0         NaN    Yes\n","3    David  22.0   90.0        85.0    Yes\n","4      Eve  20.0   88.0        95.0     No\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 16 entries, 0 to 15\n","Data columns (total 5 columns):\n"," #   Column      Non-Null Count  Dtype  \n","---  ------      --------------  -----  \n"," 0   Name        16 non-null     object \n"," 1   Age         12 non-null     float64\n"," 2   Marks       12 non-null     float64\n"," 3   Attendance  12 non-null     float64\n"," 4   Passed      16 non-null     object \n","dtypes: float64(3), object(2)\n","memory usage: 772.0+ bytes\n","None\n","Name          0\n","Age           4\n","Marks         4\n","Attendance    4\n","Passed        0\n","dtype: int64\n"]}]},{"source":["from IPython import get_ipython\n","from IPython.display import display\n","# %%\n","from google.colab import drive\n","drive.mount('/content/drive')\n","# %%\n","import pandas as pd\n","\n","# Load the dataset\n","# Replace \"csv file.csv\" with the actual path to your file if it's not in the same directory\n","df = pd.read_csv(\"csv file.csv\")\n","\n","# Show the first 5 rows\n","print(df.head())\n","\n","# Summary info\n","print(df.info())\n","\n","# Check for missing values\n","print(df.isnull().sum())\n","\n","# %%\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import classification_report, confusion_matrix\n","from sklearn.model_selection import train_test_split # Import train_test_split\n","\n","# Assuming 'your_actual_target_column_name' is the name of your target variable column in df\n","# Replace 'your_actual_target_column_name' with the actual name of your target column\n","target_column_name = 'your_actual_target_column_name' # <--- REPLACE THIS WITH YOUR ACTUAL TARGET COLUMN NAME\n","\n","# Check if the target column exists in the DataFrame\n","if target_column_name not in df.columns:\n","    print(f\"Error: Target column '{target_column_name}' not found in the DataFrame.\")\n","    # You might want to add code here to list available columns or exit\n","else:\n","    X = df.drop(target_column_name, axis=1) # Features are all columns except the target\n","    y = df[target_column_name]             # Target variable\n","\n","    # Split the data into training and testing sets\n","    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Adjust test_size as needed\n","\n","    # Initialize the model\n","    model = RandomForestClassifier(random_state=42)\n","\n","    # Train the model\n","    model.fit(X_train, y_train)\n","\n","    # Make predictions\n","    y_pred = model.predict(X_test)\n","\n","    # Evaluate the model\n","    print(\"Confusion Matrix:\")\n","    print(confusion_matrix(y_test, y_pred))\n","    print(\"\\nClassification Report:\")\n","    print(classification_report(y_test, y_pred))\n","\n","# %%\n","# This cell was a duplicate and is not needed.\n","# from sklearn.ensemble import RandomForestClassifier\n","# from sklearn.metrics import classification_report, confusion_matrix\n","\n","# # Initialize the model\n","# model = RandomForestClassifier(random_state=42)\n","\n","# # Train the model\n","# model.fit(X_train, y_train)\n","\n","# # Make predictions\n","# y_pred = model.predict(X_test)\n","\n","# # Evaluate the model\n","# print(\"Confusion Matrix:\")\n","# print(confusion_matrix(y_test, y_pred))\n","# print(\"\\nClassification Report:\")\n","# print(classification_report(y_test, y_pred))"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Gh4xm8nigW37","executionInfo":{"status":"ok","timestamp":1747389150138,"user_tz":-330,"elapsed":3071,"user":{"displayName":"Sandhiya Sd","userId":"03388719252497544613"}},"outputId":"e730d150-f770-42d2-ce32-4f232c8f1e1f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","      Name   Age  Marks  Attendance Passed\n","0    Alice  20.0   85.0        90.0    Yes\n","1      Bob  21.0    NaN        80.0     No\n","2  Charlie   NaN   78.0         NaN    Yes\n","3    David  22.0   90.0        85.0    Yes\n","4      Eve  20.0   88.0        95.0     No\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 16 entries, 0 to 15\n","Data columns (total 5 columns):\n"," #   Column      Non-Null Count  Dtype  \n","---  ------      --------------  -----  \n"," 0   Name        16 non-null     object \n"," 1   Age         12 non-null     float64\n"," 2   Marks       12 non-null     float64\n"," 3   Attendance  12 non-null     float64\n"," 4   Passed      16 non-null     object \n","dtypes: float64(3), object(2)\n","memory usage: 772.0+ bytes\n","None\n","Name          0\n","Age           4\n","Marks         4\n","Attendance    4\n","Passed        0\n","dtype: int64\n","Error: Target column 'your_actual_target_column_name' not found in the DataFrame.\n"]}]},{"cell_type":"code","source":["# === Step 1: Import Required Libraries ===\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# === Step 2: Load the Dataset ===\n","# Make sure you have mounted your drive and verified the file path\n","# Replace 'your_actual_path_to_file/WA_Fn-UseC_-Telco-Customer-Churn.csv'\n","# with the actual path to your file in Google Drive.\n","# Example: '/content/drive/MyDrive/YourFolderName/WA_Fn-UseC_-Telco-Customer-Churn.csv'\n","# IMPORTANT: Update this line with the CORRECT path to your CSV file\n","# Ensure the CSV file you are loading contains the 'customerID' column if you intend to drop it.\n","# If your CSV does not have 'customerID', you should remove the line that tries to drop it.\n","df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/csv file.csv') # Update this line with your actual file path\n","\n","# Print the columns in the loaded DataFrame to verify their names\n","print(\"Columns in the loaded DataFrame:\", df.columns.tolist())\n","\n","# === Step 3: Data Preprocessing ===\n","\n","# Check if 'customerID' column exists before dropping it\n","if 'customerID' in df.columns:\n","    df.drop('customerID', axis=1, inplace=True)  # Drop ID column\n","else:\n","    print(\"Warning: 'customerID' column not found in the DataFrame. Skipping drop.\")\n","    # Consider if dropping this column is necessary for your specific dataset\n","    # If your dataset doesn't have an ID column to drop, you can remove or comment out\n","    # the df.drop('customerID', ...) line entirely.\n","\n","# Convert 'TotalCharges' to numeric and handle missing values\n","# Check if 'TotalCharges' column exists before attempting to convert\n","if 'TotalCharges' in df.columns:\n","    df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')\n","    df['TotalCharges'].fillna(df['TotalCharges'].median(), inplace=True)\n","else:\n","     print(\"Warning: 'TotalCharges' column not found. Skipping conversion and fillna.\")\n","\n","\n","# Encode the target column\n","# Replace 'Churn' with the actual name of your target column if it's different\n","target_column_name = 'Churn' # <--- REPLACE THIS WITH YOUR ACTUAL TARGET COLUMN NAME\n","if target_column_name in df.columns:\n","    # Ensure the target column is of object type or contains 'Yes'/'No' strings\n","    # You might need different encoding logic if your target is already numeric or has different values\n","    if df[target_column_name].dtype == 'object':\n","        df[target_column_name] = df[target_column_name].map({'Yes': 1, 'No': 0})\n","    elif df[target_column_name].nunique() > 2:\n","        print(f\"Warning: Target column '{target_column_name}' is not binary. Map operation might fail or be incorrect.\")\n","    # If target is already numeric (0/1), no mapping is needed.\n","else:\n","     print(f\"Error: Target column '{target_column_name}' not found. Cannot encode.\")\n","     # You should add code here to handle the missing target column, possibly stopping execution\n","\n","# Encode categorical variables\n","# Filter for object type columns, excluding the target if it's still an object\n","cat_cols = df.select_dtypes(include='object').columns.tolist()\n","if target_column_name in cat_cols and df[target_column_name].dtype == 'object':\n","    cat_cols.remove(target_column_name) # Exclude target if not already encoded\n","\n","le = LabelEncoder()\n","for col in cat_cols:\n","    if df[col].nunique() == 2:\n","        # For binary object columns, use LabelEncoder\n","        try:\n","            df[col] = le.fit_transform(df[col])\n","        except Exception as e:\n","            print(f\"Error encoding binary column {col}: {e}\")\n","            # Inspect unique values in this column to understand the issue\n","            print(f\"Unique values in {col}: {df[col].unique()}\")\n","    else:\n","        # For multi-class object columns, use one-hot encoding\n","        df = pd.get_dummies(df, columns=[col], dummy_na=False) # Consider handling NaNs if necessary\n","\n","\n","# Split features and target\n","# Check if the target column exists after encoding\n","if target_column_name in df.columns:\n","    X = df.drop(target_column_name, axis=1)\n","    y = df[target_column_name]\n","else:\n","    print(f\"Error: Target column '{target_column_name}' not found after preprocessing. Cannot split data.\")\n","    # Stop execution or handle the error appropriately\n","    # For example, you could exit the cell using `raise SystemExit(\"Target column missing\")`\n","\n","    # Dummy assignment to prevent NameError if stopping execution isn't desired\n","    X = None\n","    y = None\n","\n","\n","# Proceed with scaling, splitting, training, and evaluation ONLY if X and y were successfully created\n","if X is not None and y is not None:\n","    # Scale features\n","    scaler = StandardScaler()\n","    # Ensure X is a DataFrame before scaling if get_dummies was used and resulted in a sparse matrix\n","    # StandardScaler works with numpy arrays or DataFrames\n","    X_scaled = scaler.fit_transform(X)\n","\n","    # Train/test split\n","    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n","\n","    # === Step 4: Train the Model ===\n","    model = RandomForestClassifier(random_state=42)\n","    model.fit(X_train, y_train)\n","\n","    # === Step 5: Evaluate the Model ===\n","    y_pred = model.predict(X_test)\n","\n","    print(\"\\n✅ Accuracy:\", accuracy_score(y_test, y_pred))\n","    print(\"\\n✅ Classification Report:\\n\", classification_report(y_test, y_pred))\n","\n","    # Confusion matrix\n","    sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')\n","    plt.xlabel('Predicted')\n","    plt.ylabel('Actual')\n","    plt.title('📉 Confusion Matrix')\n","    plt.show()\n","else:\n","    print(\"Skipping model training and evaluation due to missing target column.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t_tfoE6KmqTT","executionInfo":{"status":"ok","timestamp":1747392391388,"user_tz":-330,"elapsed":183,"user":{"displayName":"Sandhiya Sd","userId":"03388719252497544613"}},"outputId":"4fb0417d-9b3c-46dd-89df-66ec5fdf80db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Columns in the loaded DataFrame: ['Name', 'Age', 'Marks', 'Attendance', 'Passed']\n","Warning: 'customerID' column not found in the DataFrame. Skipping drop.\n","Warning: 'TotalCharges' column not found. Skipping conversion and fillna.\n","Error: Target column 'Churn' not found. Cannot encode.\n","Error: Target column 'Churn' not found after preprocessing. Cannot split data.\n","Skipping model training and evaluation due to missing target column.\n"]}]},{"cell_type":"code","source":["from IPython import get_ipython\n","from IPython.display import display\n","# %%\n","from google.colab import drive\n","# Make sure you have mounted your drive and verified the file path\n","drive.mount('/content/drive')\n","# %%\n","import pandas as pd\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import classification_report, confusion_matrix\n","from sklearn.model_selection import train_test_split # Import train_test_split\n","\n","# Load the dataset\n","# Replace \"csv file.csv\" with the actual path to your file.\n","# Ensure this path is correct relative to your mounted Google Drive or current directory.\n","# Example if in a folder called 'data' in your Drive: '/content/drive/MyDrive/data/csv file.csv'\n","df = pd.read_csv(\"csv file.csv\") # <-- Update this line with your actual file path\n","\n","# Show the first 5 rows\n","print(df.head())\n","\n","# Summary info\n","print(df.info())\n","\n","# Check for missing values\n","print(df.isnull().sum())\n","\n","# %%\n","# Assuming 'your_actual_target_column_name' is the name of your target variable column in df\n","# Replace 'your_actual_target_column_name' with the actual name of your target column\n","target_column_name = 'your_actual_target_column_name' # <--- REPLACE THIS WITH YOUR ACTUAL TARGET COLUMN NAME\n","\n","# Check if the target column exists in the DataFrame\n","if target_column_name not in df.columns:\n","    print(f\"Error: Target column '{target_column_name}' not found in the DataFrame.\")\n","    # You might want to add code here to list available columns or exit the script gracefully\n","    # For now, we'll assume you will fix the target_column_name\n","    # You could print available columns like this:\n","    # print(\"Available columns:\", df.columns.tolist())\n","else:\n","    X = df.drop(target_column_name, axis=1) # Features are all columns except the target\n","    y = df[target_column_name]             # Target variable\n","\n","    # Split the data into training and testing sets\n","    # Adjust test_size as needed, 0.2 means 20% for testing\n","    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","    # Initialize the model\n","    model = RandomForestClassifier(random_state=42)\n","\n","    # Train the model\n","    # This is where the error occurred because X_train and y_train weren't defined\n","    # Running this cell after the split will fix it\n","    model.fit(X_train, y_train)\n","\n","    # Make predictions\n","    y_pred = model.predict(X_test)\n","\n","    # Evaluate the model\n","    print(\"Confusion Matrix:\")\n","    print(confusion_matrix(y_test, y_pred))\n","    print(\"\\nClassification Report:\")\n","    print(classification_report(y_test, y_pred))\n","\n","# %%\n","# Remove or comment out the duplicate cell below this line in your actual notebook\n","# because the previous cell already performs the training and evaluation.\n","# from sklearn.ensemble import RandomForestClassifier\n","# from sklearn.metrics import classification_report, confusion_matrix\n","\n","# # Initialize the model\n","# model = RandomForestClassifier(random_state=42)\n","\n","# # Train the model\n","# # This cell will now cause a NameError if the previous cell hasn't defined X_train/y_train\n","# model.fit(X_train, y_train)\n","\n","# # Make predictions\n","# y_pred = model.predict(X_test)\n","\n","# # Evaluate the model\n","# print(\"Confusion Matrix:\")\n","# print(confusion_matrix(y_test, y_pred))\n","# print(\"\\nClassification Report:\")\n","# print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R-1MeXzUiHiW","executionInfo":{"status":"ok","timestamp":1747389555691,"user_tz":-330,"elapsed":3748,"user":{"displayName":"Sandhiya Sd","userId":"03388719252497544613"}},"outputId":"2319834c-da61-4d40-dfb6-1bc136c63504"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","      Name   Age  Marks  Attendance Passed\n","0    Alice  20.0   85.0        90.0    Yes\n","1      Bob  21.0    NaN        80.0     No\n","2  Charlie   NaN   78.0         NaN    Yes\n","3    David  22.0   90.0        85.0    Yes\n","4      Eve  20.0   88.0        95.0     No\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 16 entries, 0 to 15\n","Data columns (total 5 columns):\n"," #   Column      Non-Null Count  Dtype  \n","---  ------      --------------  -----  \n"," 0   Name        16 non-null     object \n"," 1   Age         12 non-null     float64\n"," 2   Marks       12 non-null     float64\n"," 3   Attendance  12 non-null     float64\n"," 4   Passed      16 non-null     object \n","dtypes: float64(3), object(2)\n","memory usage: 772.0+ bytes\n","None\n","Name          0\n","Age           4\n","Marks         4\n","Attendance    4\n","Passed        0\n","dtype: int64\n","Error: Target column 'your_actual_target_column_name' not found in the DataFrame.\n"]}]},{"cell_type":"code","source":["# @title Default title text\n","from IPython import get_ipython\n","from IPython.display import display\n","# %%\n","from google.colab import drive\n","# Make sure you have mounted your drive and verified the file path\n","drive.mount('/content/drive')\n","# %%\n","import pandas as pd\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import classification_report, confusion_matrix\n","from sklearn.model_selection import train_test_split # Import train_test_split\n","\n","# Load the dataset\n","# Replace \"csv file.csv\" with the actual path to your file.\n","# Ensure this path is correct relative to your mounted Google Drive or current directory.\n","# Example if in a folder called 'data' in your Drive: '/content/drive/MyDrive/data/csv file.csv'\n","df = pd.read_csv(\"csv file.csv\") # <-- Update this line with your actual file path\n","\n","# Show the first 5 rows\n","print(df.head())\n","\n","# Summary info\n","print(df.info())\n","\n","# Check for missing values\n","print(df.isnull().sum())\n","\n","# %%\n","# Assuming 'your_actual_target_column_name' is the name of your target variable column in df\n","# Replace 'your_actual_target_column_name' with the actual name of your target column\n","target_column_name = 'your_actual_target_column_name' # <--- REPLACE THIS WITH YOUR ACTUAL TARGET COLUMN NAME\n","\n","# Check if the target column exists in the DataFrame\n","if target_column_name not in df.columns:\n","    print(f\"Error: Target column '{target_column_name}' not found in the DataFrame.\")\n","    # You might want to add code here to list available columns or exit the script gracefully\n","    # For now, we'll assume you will fix the target_column_name\n","    # You could print available columns like this:\n","    # print(\"Available columns:\", df.columns.tolist())\n","else:\n","    X = df.drop(target_column_name, axis=1) # Features are all columns except the target\n","    y = df[target_column_name]             # Target variable\n","\n","    # Split the data into training and testing sets\n","    # Adjust test_size as needed, 0.2 means 20% for testing\n","    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","    # Initialize the model\n","    model = RandomForestClassifier(random_state=42)\n","\n","    # Train the model\n","    # This is where the error occurred because X_train and y_train weren't defined\n","    # Running this cell after the split will fix it\n","    model.fit(X_train, y_train)\n","\n","    # Make predictions\n","    y_pred = model.predict(X_test)\n","\n","    # Evaluate the model\n","    print(\"Confusion Matrix:\")\n","    print(confusion_matrix(y_test, y_pred))\n","    print(\"\\nClassification Report:\")\n","    print(classification_report(y_test, y_pred))\n","\n","# %%\n","# Remove or comment out the duplicate cell below this line in your actual notebook\n","# because the previous cell already performs the training and evaluation.\n","# from sklearn.ensemble import RandomForestClassifier\n","# from sklearn.metrics import classification_report, confusion_matrix\n","\n","# # Initialize the model\n","# model = RandomForestClassifier(random_state=42)\n","\n","# # Train the model\n","# # This cell will now cause a NameError if the previous cell hasn't defined X_train/y_train\n","# model.fit(X_train, y_train)\n","\n","# # Make predictions\n","# y_pred = model.predict(X_test)\n","\n","# # Evaluate the model\n","# print(\"Confusion Matrix:\")\n","# print(confusion_matrix(y_test, y_pred))\n","# print(\"\\nClassification Report:\")\n","# print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c7twka_FiHcQ","executionInfo":{"status":"ok","timestamp":1747409204087,"user_tz":-330,"elapsed":2401,"user":{"displayName":"Sandhiya Sd","userId":"03388719252497544613"}},"outputId":"1d828983-51bc-48f3-d305-310eb14abb16"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","      Name   Age  Marks  Attendance Passed\n","0    Alice  20.0   85.0        90.0    Yes\n","1      Bob  21.0    NaN        80.0     No\n","2  Charlie   NaN   78.0         NaN    Yes\n","3    David  22.0   90.0        85.0    Yes\n","4      Eve  20.0   88.0        95.0     No\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 16 entries, 0 to 15\n","Data columns (total 5 columns):\n"," #   Column      Non-Null Count  Dtype  \n","---  ------      --------------  -----  \n"," 0   Name        16 non-null     object \n"," 1   Age         12 non-null     float64\n"," 2   Marks       12 non-null     float64\n"," 3   Attendance  12 non-null     float64\n"," 4   Passed      16 non-null     object \n","dtypes: float64(3), object(2)\n","memory usage: 772.0+ bytes\n","None\n","Name          0\n","Age           4\n","Marks         4\n","Attendance    4\n","Passed        0\n","dtype: int64\n","Error: Target column 'your_actual_target_column_name' not found in the DataFrame.\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1747284411126}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}